trigger: none

pr:
  branches:
      include:
          - main

variables:
  SLACK_CHANNEL: 'meetup-releases'

pool:
  vmImage: windows-latest

stages:
  - stage: buildAndTest
    displayName: Build & Test
    jobs:
      - job:
        displayName: dotnet build/test/publish
        steps:
          - task: DotNetCoreCLI@2
            displayName: 'dotnet build'
            inputs:
              command: 'build'
              projects: 'UmbracoProject/UmbracoProject.csproj'

          - task: DotNetCoreCLI@2
            displayName: 'dotnet test'
            inputs:
              arguments: '--collect:"XPlat Code Coverage" --logger trx'
              command: 'test'
              projects: '**/*.Tests.csproj'
          - task: PublishTestResults@2
            displayName: 'publish test results'
            inputs:
              searchFolder: $(Agent.TempDirectory)
              testResultsFiles: '**/*.trx'
              testRunner: VSTest
          - task: reportgenerator@5
            displayName: 'merge code coverage reports'
            inputs:
              reports: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
              reporttypes: 'Cobertura'
              targetdir: '$(Pipeline.Workspace)/coverlet'
              verbosity: 'Verbose'
          - task: PublishCodeCoverageResults@1
            displayName: 'publish code coverage results'
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: '$(Pipeline.Workspace)/coverlet/Cobertura.xml'

          - task: DotNetCoreCLI@2
            displayName: 'dotnet publish'
            inputs:
              arguments: '--no-build --output $(Build.ArtifactStagingDirectory)/publish -p:Version=$(Build.BuildNumber)'
              command: 'publish'
              projects: 'UmbracoProject/UmbracoProject.csproj'
              publishWebProjects: false
              zipAfterPublish: false
          - task: ArchiveFiles@2
            displayName: 'create build artifact'
            inputs:
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
              includeRootFolder: false
              replaceExistingArchive: true
              rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/publish/UmbracoProject'
          - task: PublishPipelineArtifact@1
            displayName: 'publish build artifact'
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
              artifactName: umbraco-build

  - stage: deploy
    displayName: Direct Deploy
    jobs:
      - job:
        displayName: deploy/verify
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'download build artifact'
            inputs:
              artifactName: umbraco-build
              downloadPath: '$(Build.ArtifactStagingDirectory)/deploy'
              downloadType: 'single'
              source: current
          - task: AzureRmWebAppDeployment@4
            displayName: 'deploy artifact'
            inputs:
              AppSettings: '-Umbraco:CMS:Examine:LuceneDirectoryFactory SyncedTempFileSystemDirectoryFactory -Umbraco:CMS:Global:MainDomLock FileSystemMainDomLock -Umbraco:CMS:Hosting:LocalTempStorageLocation EnvironmentTemp'
              appType: webApp
              azureSubscription: 'BrightHR'
              ConnectionType: 'AzureRM'
              deployToSlotOrASE: false
              enableCustomDeployment: true
              package: '$(Build.ArtifactStagingDirectory)/deploy/*.zip'
              resourceGroupName: 'Meetup'
              webAppName: 'umbmeetupstaging'
          - task: PowerShell@2
            displayName: health checks
            inputs:
              targetType: 'inline'
              failOnStderr: true
              script: |
                [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12
                try {
                    $Retries = 2
                    $RetryDelaySeconds = 10
                    $Success = $false
                    $RetryCount = 0
                    $Url = "https://umbmeetupstaging.azurewebsites.net"
                    while (-not $Success) {
                        try {
                            $Request = [System.Net.WebRequest]::Create($Url)
                            $Request.Timeout = 30000
                            Write-Host ">>>>> GET $Url"
                            $Response = $Request.GetResponse()
                            $StatusCode = [int]$Response.StatusCode
                            if ($StatusCode -ne 200) {
                                throw ">>>>> Response - $StatusCode"
                            }
                            Write-Host ">>>>> Response - $StatusCode OK"
                            $Success = $true
                        }
                        catch {
                            Write-Warning "$_"
                            if ($RetryCount -ge $Retries) {
                                throw ">>>>> Request failed maximum number of retries ($RetryCount)"
                            } else {
                                $RetryCount++
                                Write-Warning ">>>>> Retry attempt #($RetryCount) in $RetryDelaySeconds seconds"
                                Start-Sleep $RetryDelaySeconds
                            }
                        }
                    }
                }
                catch {
                    Write-Error "$_"
                    [System.Environment]::Exit(1)
                }
                finally
                {
                    if ($Response -ne $null) { $Response.Close(); }
                }
          - script: |
              curl -L -X POST 'https://slack.com/api/chat.postMessage' \
              -H 'Authorization: Bearer $(SLACK_TOKEN)' \
              -H 'Content-Type: application/json' \
              --data-raw '{
                "channel": "$(SLACK_CHANNEL)",
                "username": "Meetup",
                "icon_emoji": ":technologist:",
                "attachments": [
                  {
                    "color": "#2EB67D",
                    "blocks": [
                      {
                        "type": "section",
                        "text": {
                          "type": "mrkdwn",
                          "text": "*Wi-Fi-Enabled-Washer-Dryer*\nPull Request"
                        }
                      },
                      {
                        "type": "context",
                        "elements": [
                          {
                            "type": "mrkdwn",
                            "text": "Deployed <https://github.com/$(Build.Repository.Name)/pull/$(System.PullRequest.PullRequestNumber)|#$(System.PullRequest.PullRequestNumber)>"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "https://umbmeetupstaging.azurewebsites.net"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }'
            displayName: Post success to Slack
          - script: |
              curl -L -X POST 'https://slack.com/api/chat.postMessage' \
              -H 'Authorization: Bearer $(SLACK_TOKEN)' \
              -H 'Content-Type: application/json' \
              --data-raw '{
                "channel": "$(SLACK_CHANNEL)",
                "username": "Azure DevOps",
                "icon_emoji": ":facepalm:",
                "attachments": [
                  {
                    "color": "#E01E5A",
                    "blocks": [
                      {
                        "type": "section",
                        "text": {
                          "type": "mrkdwn",
                          "text": "*Wi-Fi-Enabled-Washer-Dryer*\Pull Request"
                        }
                      },
                      {
                        "type": "context",
                        "elements": [
                          {
                            "type": "mrkdwn",
                            "text": "Failed to deploy <https://github.com/$(Build.Repository.Name)/pull/$(System.PullRequest.PullRequestNumber)|#$(System.PullRequest.PullRequestNumber)>"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "<https://dev.azure.com/DevSeanOps/Wi-Fi%20Enabled%20Washer%20Dryer/_build/results?buildId=$(Build.BuildId)|View logs>"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }'
            displayName: Post failure to Slack
            condition: failed()